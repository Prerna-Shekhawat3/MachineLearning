# -*- coding: utf-8 -*-
"""PowerTransformer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lRfg6-m3xMDzgDWOH8z5u86o75IpxthZ
"""

import pandas as pd
import numpy as np

import scipy.stats as stats
from sklearn.metrics import r2_score

from sklearn.linear_model import LinearRegression

from sklearn.preprocessing import PowerTransformer

from sklearn.model_selection import cross_val_score

from sklearn.model_selection import train_test_split

df=pd.read_csv('/content/concrete_data.csv')

df.head()

df.isna().any()

X=df.iloc[:,:-1]
y=df.iloc[:,-1]

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)

model=LinearRegression()

model.fit(X_train,y_train)

y_pred=model.predict(X_test)

r2_score(y_pred,y_test)

model=LinearRegression()

np.mean(cross_val_score(model,X,y,scoring='r2'))

import matplotlib.pyplot as plt
import seaborn as sns

#Plotting distplot without transformation

for cols in X_train.columns:
  plt.figure(figsize=(14,2))

  plt.subplot(121)
  sns.kdeplot(X_train[cols])
  plt.title(cols)

  plt.subplot(122)
  stats.probplot(X_train[cols],plot=plt,dist="norm")
  plt.title(cols)

#Applying Box-Cox transformer

trf=PowerTransformer(method='box-cox')

X_train_trans=trf.fit_transform(X_train+0.0001)

X_test_trans=trf.transform(X_test+0.0001)

pd.DataFrame({'cols':X_train.columns,'box-cox lambda':trf.lambdas_})

model=LinearRegression()

model.fit(X_train_trans,y_train)

y_pred=model.predict(X_test_trans)

r2_score(y_pred,y_test)

#Using cross val

model=LinearRegression()

trf=PowerTransformer(method='box-cox')

X_transformed=trf.fit_transform(X+0.0001)

np.mean(cross_val_score(model,X_transformed,y,scoring='r2'))

#Before anf after box cox distribution

X_train_trans=pd.DataFrame(X_train_trans,columns=X_train.columns)

for cols in X_train.columns:
  plt.figure(figsize=(14,2))

  plt.subplot(122)
  sns.kdeplot(X_train[cols])
  plt.title(cols)

  plt.subplot(121)
  sns.kdeplot(X_train_trans[cols])
  plt.title(cols)

#Before anf after box cox distribution

X_train_trans=pd.DataFrame(X_train_trans,columns=X_train.columns)

plt.figure(figsize=(14,4))

plt.subplot(122)
sns.kdeplot(X_train['Cement'])
plt.title('Before applying Box Cox Trf')

plt.subplot(121)
sns.kdeplot(X_train_trans['Cement'])
plt.title('After applying Box Cox Trf')

#Applying Joe Johnsom

trf2=PowerTransformer()

X_train_trans=trf2.fit_transform(X_train)
X_test_trans=trf2.fit_transform(X_test)

model=LinearRegression()

model.fit(X_train_trans,y_train)

y_pred=model.predict(X_test_trans)

print(r2_score(y_pred,y_test))

#Using cross val

model=LinearRegression()

trf=PowerTransformer()

X_transformed=trf.fit_transform(X+0.0001)

np.mean(cross_val_score(model,X_transformed,y,scoring='r2'))

#Before anf after Yeo johnson distribution

X_train_trans=pd.DataFrame(X_train_trans,columns=X_train.columns)

for cols in X_train.columns:
  plt.figure(figsize=(14,2))

  plt.subplot(122)
  sns.kdeplot(X_train[cols])
  plt.title(cols)

  plt.subplot(121)
  sns.kdeplot(X_train_trans[cols])
  plt.title(cols)

