# -*- coding: utf-8 -*-
"""FunctionTransformer

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UpproENKefcf-KI94QkYbGnXyNoqH3bV
"""

import pandas as pd
import numpy as np

df=pd.read_csv('/content/Titanic-Dataset.csv',usecols=['Age','Fare','Survived'])

import scipy.stats as stats
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.model_selection import cross_val_score

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier

from sklearn.preprocessing import FunctionTransformer
from sklearn.compose import ColumnTransformer

df.head()

df.isna().any()

df['Age'].fillna(df['Age'].mean(),inplace=True)

df.isnull().sum()

X=df.iloc[:,1:3]
y=df.iloc[:,0]

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.33,random_state=42)

plt.figure(figsize=(14,4))
plt.subplot(121)
sns.kdeplot(X_train['Age'])
plt.title("Age")

plt.subplot(122)
stats.probplot(X_train['Age'],dist="norm",plot=plt)
plt.title("Age")

plt.figure(figsize=(14,4))
plt.subplot(121)
sns.distplot(X_train['Fare'])
plt.title('Fare')

plt.subplot(122)
stats.probplot(X_train['Fare'],plot=plt,dist="norm")
plt.title("Fare")

model1=DecisionTreeClassifier()
model2=LogisticRegression()

model1.fit(X_train,y_train)
model2.fit(X_train,y_train)


y_pred=model1.predict(X_test)
y_pred2=model2.predict(X_test)


print("Accuracy_score DT",accuracy_score(y_pred,y_test))
print("Accuracy_score LR",accuracy_score(y_pred2,y_test))

trf=FunctionTransformer(func=np.log1p)

X_train_transformed=trf.fit_transform(X_train)
X_test_transformed=trf.fit_transform(X_test)


model1=DecisionTreeClassifier()
model2=LogisticRegression()

model1.fit(X_train_transformed,y_train)
model2.fit(X_train_transformed,y_train)

y_pred=model1.predict(X_test_transformed)
y_pred2=model2.predict(X_test_transformed)

print("Accuracy_score DT",accuracy_score(y_pred,y_test))
print("Accuracy_score LR",accuracy_score(y_pred2,y_test))

X_transformed=trf.fit_transform(X)

model1.fit(X_train_transformed,y_train)
model2.fit(X_train_transformed,y_train)

print("LP",np.mean(cross_val_score(model2,X_transformed,y,scoring='accuracy',cv=10)))
print("DT",np.mean(cross_val_score(model1,X_transformed,y,scoring='accuracy',cv=10)))

plt.figure(figsize=(14,4))

plt.subplot(121)
stats.probplot(X_train['Fare'],plot=plt,dist="norm")
plt.title("Before applying transformer fare")


plt.subplot(122)
stats.probplot(X_train_transformed['Fare'],plot=plt,dist="norm")
plt.title("After applying transformer fare")

plt.figure(figsize=(14,4))

plt.subplot(121)
stats.probplot(X_train['Age'],plot=plt,dist="norm")
plt.title("Before applying transformer Age")


plt.subplot(122)
stats.probplot(X_train_transformed['Age'],plot=plt,dist="norm")
plt.title("After applying transformer Age")

trf2=ColumnTransformer([
    ('log',FunctionTransformer(np.log1p),['Fare'])
],remainder='passthrough')

X_train_trf=trf2.fit_transform(X_train)
X_test_trf=trf2.transform(X_test)

model1=DecisionTreeClassifier()
model2=LogisticRegression()

model1.fit(X_train_trf,y_train)
model2.fit(X_train_trf,y_train)

y_pred=model1.predict(X_test_trf)
y_pred2=model2.predict(X_test_trf)

print("Accuracy_score DT",accuracy_score(y_pred,y_test))
print("Accuracy_score LR",accuracy_score(y_pred2,y_test))

X_transformed2=trf2.fit_transform(X)

model1=DecisionTreeClassifier()
model2=LogisticRegression()

print("LP",np.mean(cross_val_score(model2,X_transformed2,y,scoring='accuracy',cv=10)))
print("DT",np.mean(cross_val_score(model1,X_transformed2,y,scoring='accuracy',cv=10)))

def apply_transform(transform):
  X=df.iloc[:,1:3]
  y=df.iloc[:,0]

  trf=ColumnTransformer([
      ('log',FunctionTransformer(transform),['Fare'])
  ],remainder='passthrough')

  X_trans=trf.fit_transform(X)

  clf=LogisticRegression()

  print("Accuracy",np.mean(cross_val_score(clf,X_trans,y,scoring='accuracy',cv=10)))


  plt.figure(figsize=(14,4))
  plt.subplot(121)
  stats.probplot(X['Fare'],dist='norm',plot=plt)
  plt.title("Fare")


  plt.subplot(122)
  stats.probplot(X_trans[:,0],dist='norm',plot=plt)
  plt.title("Fare after trans")

apply_transform(lambda x:1/(x+0.001))

