# -*- coding: utf-8 -*-
"""Standardization

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hiAJttMblhD9NwnfeWlw9nE4Pr-kog8C
"""

import pandas as pd
import numpy as np

df=pd.read_csv('/content/Social_Network_Ads.csv')

df.head()

df.info()

df.isna().any()

df=df[['Age','EstimatedSalary','Purchased']]

df.head()

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test=train_test_split(df.drop(['Purchased'],axis=1),df['Purchased'],test_size=0.33)

# from sklearn.model_selection import train_test_split
# X_train,X_test,y_train,y_test=train_test_split(df.iloc[:,0:2],df['Purchased'],test_size=0.33)

from sklearn.preprocessing import StandardScaler
se=StandardScaler()

"""## *We will learn scaling on X_train and apply on X-train,X_test* ##"""

se.fit(X_train)

#Mean of both the columns get stored in se which is further applied
se.mean_

"""## *Now we will scale x-train and  x-test* ##"""

X_train_scaled=se.transform(X_train)

X_test_scaled=se.transform(X_test)

se.mean_

"""## *When we give dataframe for transformation it gets converted into numpy array so we need to convert it to dataframe* ##"""

X_train

X_train_scaled

X_train_scaled=pd.DataFrame(X_train_scaled,columns=X_train.columns)
X_test_scaled=pd.DataFrame(X_test_scaled,columns=X_train.columns)

X_train_scaled

np.round(X_train.describe(),1)

np.round(X_train_scaled.describe())

import matplotlib.pyplot as plt


fig ,(ax1,ax2)=plt.subplots(ncols=2,figsize=(12,5))

ax1.scatter(X_train['Age'],X_train['EstimatedSalary'])
ax1.set_title('Before Scaling')

ax2.scatter(X_train_scaled['Age'],X_train_scaled['EstimatedSalary'],color='red')
ax2.set_title("After Scaling")

import seaborn as sns


fig ,(ax1,ax2)=plt.subplots(ncols=2,figsize=(13,4))
ax1.set_title("Before Scaling")
ax1.set_xlabel("Age")
ax1.set_ylabel("Estimated Salary")
sns.kdeplot(X_train['Age'],ax=ax1)
sns.kdeplot(X_train['EstimatedSalary'],ax=ax1)

ax2.set_title("After Scaling")
ax2.set_xlabel("Age")
ax2.set_ylabel("Estimated Salary")
sns.kdeplot(X_train_scaled['Age'],ax=ax2)
sns.kdeplot(X_train_scaled['EstimatedSalary'],ax=ax2)

"""## *Individual Distribution of Age after Scaling* ##"""

figure, (ax1,ax2)=plt.subplots(ncols=2,figsize=(12,5))

#Before Scaling
ax1.set_title("Before Scaling")
sns.kdeplot(X_train['Age'],ax=ax1)


#After Scaling
ax2.set_title("After Scaling")
sns.kdeplot(X_train_scaled['Age'],ax=ax2)

"""## *Individual Distribution of EstimatedSalary after Scaling* ##"""

figure, (ax1,ax2)=plt.subplots(ncols=2,figsize=(12,5))

#Before Scaling
ax1.set_title("Before Scaling")
sns.kdeplot(X_train['EstimatedSalary'],ax=ax1)


#After Scaling
ax2.set_title("After Scaling")
sns.kdeplot(X_train_scaled['EstimatedSalary'],ax=ax2)

"""## *Why Scaling is important* ##"""

from sklearn.linear_model import LogisticRegression

lr_scaled=LogisticRegression()

lr=LogisticRegression()

lr.fit(X_train,y_train)
lr_scaled.fit(X_train_scaled,y_train)

y_pred=lr.predict(X_test)

y_pred_scaled=lr_scaled.predict(X_test_scaled)

from sklearn.metrics import accuracy_score

print(accuracy_score(y_test,y_pred))

print(accuracy_score(y_test,y_pred_scaled))

from sklearn.tree import DecisionTreeClassifier

De=DecisionTreeClassifier()

De_scaled=DecisionTreeClassifier()

De.fit(X_train,y_train)

De_scaled.fit(X_train_scaled,y_train)

y_pred=De.predict(X_test)

y_pred_scaled=De_scaled.predict(X_test_scaled)

from sklearn.metrics import accuracy_score

print("Before Scaling :",accuracy_score(y_test,y_pred))
print("After Scaling :",accuracy_score(y_test,y_pred_scaled))

