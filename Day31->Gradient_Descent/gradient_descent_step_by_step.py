# -*- coding: utf-8 -*-
"""Gradient_Descent_step_by_step.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EFZ2T0qsaIsyB8IbR5FElbvue4vbRL_o
"""

from sklearn.datasets import make_regression
import numpy as np

X,y=make_regression(n_samples=4,n_features=1,n_informative=1,n_targets=1,noise=80,random_state=13)

X,y

import matplotlib.pyplot as plt
plt.scatter(X,y)

from sklearn.linear_model import LinearRegression
model=LinearRegression()
model.fit(X,y)

#Slope
model.coef_

#Intercept
model.intercept_

plt.scatter(X,y)
plt.plot(X,model.predict(X),color='red')

#Now we will apply gradient Descent where we know slope and need to find intercept
# slope=78.35
# intercept b=0
y_pred=((78.35*X)+0).reshape((4))
y_pred

plt.scatter(X,y)
plt.plot(X,model.predict(X),color='red',label="OLS")
plt.plot(X,y_pred,color='green',label='b=0')
plt.legend()
plt.show()

m=78.35
b=0

loss_slope=-2*np.sum(y-m*X.ravel()-b)
loss_slope

lr=0.1

stepsize=lr*loss_slope

b=b-stepsize
b

y_pred=((78.35*X)+b).reshape((4))

plt.scatter(X,y)
plt.plot(X,model.predict(X),color='red',label="OLS")
plt.plot(X,y_pred,color='green',label='b=0')
plt.legend()
plt.show()

loss_slope=-2*np.sum(y-m*X.ravel()-b)
loss_slope

lr=0.1

stepsize=lr*loss_slope

b=b-stepsize
b

y_pred=((78.35*X)+b).reshape((4))

plt.scatter(X,y)
plt.plot(X,model.predict(X),color='red',label="OLS")
plt.plot(X,y_pred,color='green',label=round(b))
plt.legend()
plt.show()

loss_slope=-2*np.sum(y-m*X.ravel()-b)
loss_slope

lr=0.1

stepsize=lr*loss_slope

b=b-stepsize
b

y_pred=((78.35*X)+b).reshape((4))

plt.scatter(X,y)
plt.plot(X,model.predict(X),color='red',label="OLS")
plt.plot(X,y_pred,color='green',label=round(b))
plt.legend()
plt.show()

loss_slope=-2*np.sum(y-m*X.ravel()-b)
loss_slope

lr=0.1

stepsize=lr*loss_slope

b=b-stepsize
b

y_pred=((78.35*X)+b).reshape((4))

plt.scatter(X,y)
plt.plot(X,model.predict(X),color='red',label="OLS")
plt.plot(X,y_pred,color='green',label=round(b))
plt.legend()
plt.show()

loss_slope=-2*np.sum(y-m*X.ravel()-b)
loss_slope

lr=0.1

stepsize=lr*loss_slope

b=b-stepsize

y_pred=((78.35*X)+b).reshape((4))

plt.scatter(X,y)
plt.plot(X,model.predict(X),color='red',label="OLS")
plt.plot(X,y_pred,color='green',label=round(b))
plt.legend()
plt.show()

